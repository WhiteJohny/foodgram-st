version: '3.8'

services:
  db:
    image: postgres:17
    container_name: foodgram-db
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build: ./backend
    container_name: foodgram-backend
    volumes:
      - ./backend:/app
      - ./data:/app/data
      - static_volume:/app/static
      - media_volume:/app/media
    env_file:
      - .env
    environment:
      DB_ENGINE: django.db.backends.postgresql
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      SECRET_KEY: ${SECRET_KEY}
      DJANGO_DEBUG: ${DJANGO_DEBUG}
      DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

  frontend:
    build: ./frontend
    container_name: foodgram-frontend
    volumes:
      - frontend_static:/app/build
    networks:
      - app-network
    command: sh -c "npm run build"

  nginx:
    build: ./nginx
    container_name: foodgram-nginx
    ports:
      - "80:80"
    volumes:
      - frontend_static:/usr/share/nginx/html
      - static_volume:/app/static
      - media_volume:/app/media
    depends_on:
      - backend
      - frontend
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  frontend_static:
  static_volume:
  media_volume:
