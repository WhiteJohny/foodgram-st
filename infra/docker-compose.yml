version: '3.8'

services:
  db:
    image: postgres:17
    container_name: foodgram-db
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 5

  frontend:
    build: ../frontend
    container_name: foodgram-frontend
    ports:
      - "80:80"
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
    depends_on:
      - backend
    networks:
      - app-network
    extra_hosts:
      - "host.docker.internal:host-gateway"

  backend:
    build: ../backend
    container_name: foodgram-backend
    ports:
      - "8000:8000"
    volumes:
      - ../backend:/app
      - static_volume:/app/migrant_id_backend/static
      - media_volume:/app/media
    env_file:
      - .env
    environment:
      DB_ENGINE: django.db.backends.postgresql
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
      DJANGO_DEBUG: ${DJANGO_DEBUG}
      DJANGO_HOSTS: ${DJANGO_HOSTS}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    command: >
      sh -c "python manage.py collectstatic --noinput &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  static_volume:
  media_volume:
